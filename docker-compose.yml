services:
  postgres:
    image: postgres:14-alpine
    container_name: async_task_postgres
    environment:
      POSTGRES_DB: async_task_manager
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d async_task_manager"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: async_task_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build: .
    container_name: async_task_api
    environment:
      DATABASE_URL: postgresql+asyncpg://user:password@postgres:5432/async_task_manager
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    volumes:
      - .:/app
    restart: unless-stopped

  worker:
    build: .
    container_name: async_task_worker
    environment:
      DATABASE_URL: postgresql+asyncpg://user:password@postgres:5432/async_task_manager
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: ["python", "run_worker.py"]
    volumes:
      - .:/app
    restart: unless-stopped

volumes:
  postgres_data:
  rabbitmq_data: 